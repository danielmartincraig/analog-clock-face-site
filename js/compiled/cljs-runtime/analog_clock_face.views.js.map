{"version":3,"sources":["analog_clock_face/views.cljs"],"mappings":";AASA,AAAA,AAAMA;AAAN,AAEE,AAAMC,AAAI,AAAAC;AAAV,AACE,AAAA,AAAA,AAACC,AAA0BF;;AAE/B,AAAA,AAAAG,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAS,AAAA,AAACC,AAAeR;;AAElC,AAAA,AAAMW;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF,AAAA,AAAA,AAAAC,AAKoB,AAAA,AAAA,AAACE;AALrB,AAMwB,AAAA,AAAA,AAACT,AAAsC,AAAA,AAAAO;;;AAE/D,AAAA,AAAMG;AAAN,AACE,AAAMC,AAAS,AAAA,AAAA;AACTC,AAAK,AAAA,AAAA,AAACH;AACNI,AAAM,AAAA,AAAA,AAACJ;AAFb,AAGE;AAAA,AACE,AAAMK,AAAgBF,AACD,AAAA,AAAAN,AACA,AAACS,AAAIJ,AACL,AAAGA,AACH,AAAG,AAAA,AAAKK,AACR,AAAGA;AALxB,AAMMC,AAAe,AAAA,AAAM,AAACC,AAAYJ,AACnB,AAAA,AAAM,AAACK,AAAYL;AAPxC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAR,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAe+BO,AAEVA,AACN,AAAA,AAAgB,AAAA,AAACO,AAAwBH;;;AAE5D,AAAA,AAAMI;AAAN,AACE,AAAMC,AAAK,AAAA,AAAA,AAACb;AAAZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGIC,AACAF","names":["analog-clock-face.views/dispatch-timer-event","now","js/Date","re-frame.core/dispatch","js/analog-clock-face","js/analog-clock-face.views","js/analog-clock-face.views.do-timer","analog-clock-face.views/do-timer","js/setInterval","cljs.core/deref","p1__50879#","analog-clock-face.views/color-input","re_frame.core.subscribe","analog-clock-face.views/analog-clock-face","msPerDay","time","color","hand-angle","cljs.core/mod","js/Math.PI","hand-endpoint","js/Math.cos","js/Math.sin","clojure.string.join","analog-clock-face.views/main-panel","name"],"sourcesContent":["(ns analog-clock-face.views\n  (:require\n   [re-frame.core :as re-frame]\n   [analog-clock-face.subs :as subs]\n   [clojure.string :as str]\n   ))\n\n;; \"FITNESS DJ\"\n\n(defn dispatch-timer-event\n  []\n  (let [now (js/Date.)]\n    (re-frame/dispatch [:timer now])))\n\n(defonce do-timer (js/setInterval dispatch-timer-event 1000))\n\n(defn color-input\n  []\n  [:div.color-input\n   \"Clock color: \"\n   [:input {:type \"text\"\n            :value @(re-frame/subscribe [:time-color])\n            :on-change #(re-frame/dispatch [:time-color-change (-> % .-target .-value)])}]])\n\n(defn analog-clock-face []\n  (let [msPerDay (* 86400 1000)\n        time (re-frame/subscribe [:time])\n        color (re-frame/subscribe [:time-color])]\n    (fn []\n      (let [hand-angle (-> @time\n                           (.getTime)\n                           (mod msPerDay)\n                           (/ msPerDay)\n                           (* (* 2 js/Math.PI))\n                           (+ js/Math.PI))\n            hand-endpoint [(* 85 (js/Math.cos hand-angle))\n                           (* 85 (js/Math.sin hand-angle))]]\n        [:div\n         [:svg\n          {:style {:width 200\n                   :height 200}\n           :view-box \"-100 -100 200 200\"}\n          [:circle {:r 90\n                    :style {:fill \"white\"\n                            :stroke @color\n                            :stroke-width 3}}]\n          [:path {:stroke @color\n                  :d (str \"M 0 0 L \" (clojure.string/join \" \" hand-endpoint))}]]]))))\n\n  (defn main-panel []\n    (let [name (re-frame/subscribe [::subs/name])]\n      [:div\n       [:h1 \"Hello world, it is now\"]\n       [analog-clock-face]\n       [color-input]]))\n\n"]}